{"name":"FluentModelBuilder","tagline":"Fluently configure EntityFramework 7 DbContext","body":"## Introduction\r\n\r\n**FluentModelBuilder** provides an entry point for Entity Framework 7 Model customization programmatically, instead of using `DbSet` or `OnModelCreating` override. This gives the DbContext customization a more modular and automatic approach.\r\n\r\n### Goals\r\n\r\n[Entity Framework 7](https://github.com/aspnet/EntityFramework) is a ground-up rework of Microsoft's ORM platform. Unfortunately, it also means all of the features previous EF's had will need to be re-implemented. That's a lot of work, understandably so, but sadly a whole lot of features are still missing. One of the biggest offenders is the ability to customize your backing model from anywhere else than your subclassed DbContext, where in EF6 and earlier, there were several means of doing this, currently there is only one officially supported way - building your model yourself, but it has the pitfall of not being considerate with the DbContext's `DbSet` properties.\r\n\r\nCue **FluentModelBuilder**: It adds a model convention which updates the `InternalModelBuilder` used by `ModelBuilder` in `OnModelCreating` method. FluentModelBuilder runs prior to all other configuration, so anything that is in `OnModelCreating` of a DbContext overrides convention-based configuration.\r\n\r\n# Examples\r\n\r\nHere are a couple of examples to show you it works:\r\n\r\n## Example 1 - DbContext with specific entities\r\n### Subclassing DbContext\r\n\r\n```c#\r\n// ApplicationContext.cs\r\npublic class ApplicationContext : DbContext\r\n{\r\n  public DbSet<EntityOne> EntityOnes { get; set; } // Available as both context.EntityOnes and context.Set<EntityOne>();\r\n  public DbSet<EntityTwo> EntityTwos { get; set; } // Available as both context.EntityTwos and context.Set<EntityTwo>();\r\n\r\n  protected override void OnModelCreating(ModelBuilder builder)\r\n  {\r\n    // Alternatively:\r\n    builder.Entity<EntityThree>(); // Available as context.Set<EntityThree>();\r\n  }\r\n}\r\n\r\n// Startup.cs\r\npublic class Startup\r\n{\r\n\tpublic void Configure(IServiceCollection services)\r\n    {\r\n    \tservices.AddEntityFramework()\r\n        \t.AddDbContext<ApplicationContext>(x => x.UseInMemoryDatabase())\r\n            .AddInMemory();\r\n    }\r\n}\r\n```\r\n\r\n### FluentModelBuilder equivalent\r\n```c#\r\n// Startup.cs\r\npublic class Startup\r\n{\r\n\tpublic void Configure(IServiceCollection services)\r\n    {\r\n   \t\tservices.AddEntityFramework()\r\n        \t.AddDbContext<DbCotnext>(x => x.UseInMemoryDatabase())\r\n            .AddInMemory();\r\n\r\n        services.ConfigureEntityFramework(mappings =>\r\n        \tmappings.Add(From.Empty()\r\n            \t.Override<EntityOne>()\r\n                .Override<EntityTwo>()\r\n                .Override<EntityThree>()));\r\n    }\r\n}\r\n```\r\n\r\n## Example 2 - DbContext with discovered entities\r\n### Subclassing DbContext\r\n```c#\r\n// ApplicationContext.cs\r\npublic class ApplicationContext : DbContext\r\n{\r\n  \tprotected override void OnModelCreating(ModelBuilder builder)\r\n  \t{\r\n    \tvar types = typeof (ApplicationContext).GetTypeInfo()\r\n                .Assembly.GetExportedTypes()\r\n                .Where(x => x.GetTypeInfo().Namespace.EndsWith(\".Entities\"));\r\n            foreach (var type in types)\r\n                modelBuilder.Entity(type);\r\n  \t}\r\n}\r\n\r\n// Startup.cs\r\npublic class Startup\r\n{\r\n\tpublic void Configure(IServiceCollection services)\r\n    {\r\n    \tservices.AddEntityFramework()\r\n        \t.AddDbContext<ApplicationContext>(x => x.UseInMemoryDatabase())\r\n            .AddInMemory();\r\n    }\r\n}\r\n```\r\n\r\n### FluentModelBuilder equivalent\r\n```c#\r\n// Startup.cs\r\npublic class Startup\r\n{\r\n\tpublic void Configure(IServiceCollection services)\r\n\t{\r\n   \tservices.AddEntityFramework()\r\n\t\t\t.AddDbContext<DbCotnext>(x => x.UseInMemoryDatabase())\r\n\t\t\t.AddInMemory();\r\n        services.ConfigureEntityFramework(mappings =>\r\n        \tmappings.Add(From.AssemblyOf<Startup>(new EntityConfiguration()))\r\n    }\r\n}\r\n\r\n// EntityConfiguration.cs\r\npublic class EntityConfiguration : DefaultEntityAutoConfiguration\r\n{\r\n\tpublic override bool ShouldMap(Type type)\r\n    {\r\n    \treturn type.GetTypeInfo().Namespace.EndsWith(\".Entities\");\r\n    }\r\n}\r\n```","google":"UA-69079635-1","note":"Don't delete this file! It's used internally to help with page regeneration."}